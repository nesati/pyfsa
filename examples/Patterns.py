#!/usr/bin/pythonfrom Matcher import Patternfrom Matcher import PatternElementfrom Matcher import ActiontagList = ['NN','NNS','NNP','NNPS','DT','JJ','JJR','JJS','CD']el1 = PatternElement(tag=tagList)el2 = PatternElement(tag=tagList, quant='?')el3 = PatternElement(tag=tagList, quant='*')el4 = PatternElement(tag=tagList, quant='+')pattern1 = Pattern('pattern1',[el4])pattern2 = Pattern('pattern2',[el1,el2,el3,el4])# abbreviationsadj_tags   =  [ 'JJ','JJR','JJS' ]adv_tags   =  [ 'RB','RBR','RBS' ]det_tags   =  [ 'DT' ]modal_tags =  [ 'MD' ]noun_tags  =  [ 'NN','NNS','NNP','NNPS', 'NN-PROTEIN', 'unknown' ]verb_tags  =  [ 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ' ]np_internal_tags  = noun_tags + adj_tags + [ 'CD', 'DT', 'SYM' ]def initializeTagAbbreviations():    import string    from PatternElement import defineAbbreviation    for tag in string.split('adj_tags adv_tags det_tags modal_tags noun_tags verb_tags np_internal_tags'):        defineAbbreviation('#' + tag, globals()[tag])initializeTagAbbreviations()del initializeTagAbbreviations# Inhibitor Patternsinhibitor1 = Pattern(    'np_inhibitor_comma_np',    [ PatternElement( tag=det_tags),      PatternElement( tag=np_internal_tags, quant='*'),      PatternElement( tag=noun_tags),      PatternElement( stem=['inhibitor']),      PatternElement( tag=[',']),      PatternElement( tag=np_internal_tags, quant='+') ],    Action(head=[4],args=[[2,3],[6]]))inhibitor2 = Pattern(    'np_comma_det_np_inhibitor',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( tag=[',']),      PatternElement( tag=det_tags),      PatternElement( tag=np_internal_tags, quant='*'),      PatternElement( tag=noun_tags),      PatternElement( stem=['inhibitor']) ],    Action(head=[6],args=[[1],[4,5]]))inhibitor3 = Pattern(    'det_np_inhibitor_np?',    [ PatternElement( tag=det_tags),      PatternElement( tag=np_internal_tags, quant='*'),      PatternElement( tag=noun_tags),      PatternElement( stem=['inhibitor']),      PatternElement( tag=np_internal_tags, quant='*') ],    Action(head=[4],args=[[2,3],[5]]))inhibitor4 = Pattern(    'np_comma_det_inhibitor_of_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( tag=[',']),      PatternElement( tag=det_tags),      PatternElement( stem=['inhibitor']),      PatternElement( stem=['of']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['of','on'], quant='?'),      PatternElement( tag=np_internal_tags, quant='*') ],    Action(head=[4,5],args=[[1],[6,7,8]]))    inhibitor_patterns = [ inhibitor1, inhibitor2, inhibitor3, inhibitor4 ]# Inhibit Patternsinhibit_1 = Pattern(    'det_ability_of_np_to_inhibit_np',    [ PatternElement( tag=det_tags, quant='*'),      PatternElement( stem=['ability']),      PatternElement( stem=['of']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( tag=['TO']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['of','on'], quant='?'),      PatternElement( tag=np_internal_tags, quant='*') ],    Action(head=[7],args=[[4],[8,9,10]]))inhibit_2 = Pattern(    'high_levels_of_np_inhibit_np',    [ PatternElement( tag=np_internal_tags, quant='*'),      PatternElement( stem=['of'], quant='?'),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['of','on'], quant='?'),      PatternElement( tag=np_internal_tags, quant='*') ],    Action(head=[5],args=[[3],[6,7,8]]))inhibit_3 = Pattern(    'np_is_inhibited_by_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['be']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( stem=['by']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['of','on'], quant='?'),      PatternElement( tag=np_internal_tags, quant='*') ],        Action(head=[2,4],args=[[1],[6,7,8]]))inhibit_3a = Pattern(    'np_is_inhibited_by_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['be']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( stem=['by']),      PatternElement( tag=np_internal_tags, quant='+') ],        Action(head=[2,4,5],args=[[1],[6]]))inhibit_3b = Pattern(    'np_is_inhibited_by_np_of_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['be']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( stem=['by']),      PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['of','on']),      PatternElement( tag=np_internal_tags, quant='+') ],        Action(head=[2,4,5],args=[[1],[6,7,8]]))arrest_growth_1 = Pattern(    'np_can_arrest_growth_in_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( tag=modal_tags),      PatternElement( stem=['arrest']),      PatternElement( stem=['growth']),      PatternElement( stem=['in']),      PatternElement( tag=np_internal_tags, quant='+')],    Action(head=[2,3,4,5],args=[[1],[6]]))have_activity_against_1 = Pattern(    'np_has_activity_against_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      #PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['have']),      PatternElement( stem=['activity']),      PatternElement( stem=['against']),      PatternElement( tag=np_internal_tags, quant='+') ],    Action(head=[2,3,4],args=[[1],[5]]))show_reduction_in_1 = Pattern(    'np_show_reduction_in_np',    [ PatternElement( tag=np_internal_tags, quant='+'),      PatternElement( stem=['show']),      PatternElement( stem=['reduction']),      PatternElement( stem=['in']),      PatternElement( tag=np_internal_tags, quant='+') ],    Action(head=[2,3,4],args=[[1],[5]]))inhibit_patterns = [ inhibit_1 ,inhibit_2 ,inhibit_3 ,                     arrest_growth_1,                             have_activity_against_1,                     show_reduction_in_1 ]patterns = inhibitor_patterns + inhibit_patternsif __name__ == '__main__':    for p in inhibitor_patterns + inhibit_patterns:        print p