from Matcher import Patternfrom Matcher import PatternElementfrom Matcher import Actionfrom PatternScanner import CreateConstituentActionfrom Patterns import *from PatternScanner import CategoryTest# Noun phrase Patternsnp1 = Pattern(    'nbar = adj* noun+',    [ PatternElement( tag=np_internal_tags, quant='*'),      PatternElement( tag=noun_tags, quant='+')],    CreateConstituentAction('nbar'))np2 = Pattern(    'nbar = nbar of np',    [ CategoryTest('nbar'),      PatternElement(stem=['of']),      CategoryTest('np')],    CreateConstituentAction('nbar'))np3 = Pattern(    'np = det? nbar',    [ PatternElement( tag=det_tags, quant='?'),        CategoryTest('nbar')],    CreateConstituentAction('np'))np_patterns = [np1, np2, np3]# Inhibitor Patterns# todo: the heads of these are wronginhibitor1 = Pattern(    'np_inhibitor_comma_np',    [ CategoryTest('np'),      PatternElement( stem=['inhibitor']),      PatternElement( tag=[',']),      CategoryTest('np') ],    Action(head=[4],args=[[2,3],[6]]))inhibitor2 = Pattern(    'np_comma_np_inhibitor',    [ CategoryTest('np'),      PatternElement( tag=[',']),      CategoryTest('np'),      PatternElement( stem=['inhibitor']) ],    Action(head=[6],args=[[1],[4,5]]))inhibitor3 = Pattern(    'np_inhibitor',    [ CategoryTest('np'),      PatternElement( stem=['inhibitor']) ],    Action(head=[4],args=[[2,3],[5]]))inhibitor4= Pattern(    'np_inhibitor_np',    [ CategoryTest('np'),      PatternElement( stem=['inhibitor']),      CategoryTest('np') ],    Action(head=[4],args=[[2,3],[5]]))inhibitor4 = Pattern(    'np_comma_det?_inhibitor_of_np',    [ CategoryTest('np'),      PatternElement( tag=[',']),      PatternElement( tag=det_tags),      PatternElement( stem=['inhibitor']),      PatternElement( stem=['of']),      CategoryTest('np') ],    Action(head=[4,5],args=[[1],[6,7,8]]))    inhibitor_patterns = [ inhibitor1, inhibitor2, inhibitor3, inhibitor4 ]# Inhibit Patternsinhibit_1 = Pattern(    'det_ability_of_np_to_inhibit_np',    [ PatternElement( tag=det_tags, quant='*'),      PatternElement( stem=['ability']),      PatternElement( stem=['of']),      CategoryTest('np'),      PatternElement( tag=['TO']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      CategoryTest('np') ],    Action(head=[7],args=[[4],[8,9,10]]))inhibit_2 = Pattern(    'high_levels_of_np_inhibit_np',    [ CategoryTest('np'),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      CategoryTest('np') ],    Action(head=[5],args=[[3],[6,7,8]]))inhibit_3 = Pattern(    'np_is_inhibited_by_np',    [ CategoryTest('np'),      PatternElement( stem=['be']),      PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['inhibit']),      PatternElement( stem=['by']),      CategoryTest('np') ],    Action(head=[2,4],args=[[1],[6,7,8]]))arrest_growth_1 = Pattern(    'np_can_arrest_growth_in_np',    [ CategoryTest('np'),      PatternElement( tag=modal_tags),      PatternElement( stem=['arrest']),      PatternElement( stem=['growth']),      PatternElement( stem=['in']),      CategoryTest('np')],    Action(head=[2,3,4,5],args=[[1],[6]]))have_activity_against_1 = Pattern(    'np_has_activity_against_np',    [ CategoryTest('np'),      #PatternElement( tag=adv_tags, quant='*'),      PatternElement( stem=['have']),      PatternElement( stem=['activity']),      PatternElement( stem=['against']),      CategoryTest('np') ],    Action(head=[2,3,4],args=[[1],[5]]))show_reduction_in_1 = Pattern(    'np_show_reduction_in_np',    [ CategoryTest('np'),      PatternElement( stem=['show']),      PatternElement( stem=['reduction']),      PatternElement( stem=['in']),      CategoryTest('np') ],    Action(head=[2,3,4],args=[[1],[5]]))inhibit_patterns = [inhibit_1 ,inhibit_2 ,inhibit_3 ,                     arrest_growth_1,                             have_activity_against_1,                     show_reduction_in_1 ]rules = np_patterns + inhibitor_patterns + inhibit_patternsdefaultCategory = 'reln'